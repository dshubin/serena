<?xml version="1.0" encoding="UTF-8"?>
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier id="com.serena.air.plugin.UCSC" name="Chef" version="1"/>
    <description>
         Steps for interfacing with a Chef server.
    </description>
    <tag>Serena/Third Party/Chef</tag>
  </header>

<step-type name="Bootstrap Node">
  <description> This will install chef on the given client, and run that node's run list.</description>
  <properties>
    <property name="target" required="true">  
      <property-ui type="textBox" label="FQDN or IP address" description="FQDN or IP address of target computer."/>
    </property>
    <property name="name">  
      <property-ui type="textBox" label="Node Name" description="The name of the node."/>
    </property>     
    <property name="user">
      <property-ui type="textBox" label="SSH User Name" description="The SSH user name."/>
    </property> 
    <property name="password">  
      <property-ui type="secureBox" label="SSH Password" description="The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) Knife will prompt for the password."/>
    </property>  
<property name="useSudoPassword">
      <property-ui type="checkBox" label="Use SSH password as Sudo Password" description="Indicates that a bootstrap operation is done using sudo, with the password specified by the SSH password."/>
    </property>
    <property name="sudo">
      <property-ui type="checkBox" label="Run as Sudo" description="Check to have bootstrap operation execute using sudo."/>
    </property>      
    <property name="sudoPassword">
      <property-ui type="secureBox" label="Sudo Password" description="Enter sudo password if Use SSH password as Sudo Password is not marked."/>
    </property>               
    <property name="forwarding">  
      <property-ui type="checkBox" hidden="true" label="SSH forwarding" description="Check to indaicated that SSh agent forwarding is enabled."/>
    </property>      
    <property name="proxyUrl">  
      <property-ui type="textBox" hidden="true" label="Proxy Url" description="The proxy server for the node that is the target of a bootstrap operation."/>
    </property>      
    <property name="version">  
      <property-ui type="textBox" hidden="true" label="Chef Version" description="The version of the chef-client to install."/>
    </property>      
    <property name="distro">  
      <property-ui type="textBox" hidden="true" label="Distributions" description="The template file to be used during a bootstrap operation. The following distributions are supported: chef-full (the default bootstrap), centos5-gems, fedora13-gems, ubuntu10.04-gems, ubuntu10.04-apt, ubuntu12.04-gems, and the name of a custom bootstrap template file. When this option is used, Knife will search for the template file in the following order: the bootstrap/ folder in the current working directory, the bootstrap/ folder in the chef-repo, the bootstrap/ folder in the ~/.chef/ directory, or a default bootstrap file. Do not use the --template-file option when --distro is specified."/>
    </property>      
    <property name="gateway">  
      <property-ui type="textBox" hidden="true" label="SSH Gateway" description="The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation."/>
    </property>      
    <property name="hint">  
      <property-ui type="textBox" hidden="true" label="Hint" description="HINT_NAME[=HINT_FILE] An Ohai hint to be set on the target of the bootstrap. The hint is contained in a file and is formatted as JSON: {'attribute':'value','attribute':'value'...}. HINT_NAME is the name of the hint and HINT_FILE is the name of the hint file located at /etc/chef/ohai/hints/HINT_FILE.json. Use multiple --hint options in the command to specify multiple hints."/>
    </property>      
    <property name="identity">  
      <property-ui type="textBox" hidden="true" label="Identity File" description="The SSH identity file used for authentication. Key-based authentication is recommended."/>
    </property>      
    <property name="jsonAttr">  
      <property-ui type="textAreaBox" hidden="true" label="Json Attributes" description="A JSON string that is added to the first run of a chef-client."/>
    </property>          
    <property name="hostKeyVerify">  
      <property-ui type="checkBox" hidden="true" default-value="true" label="Host key Verify" description="Unselected to turn off host key verify (Flag of --no-host-key-verify)"/>
    </property>      
    <property name="port">  
      <property-ui type="textBox" label="SSH Port" description="The port SSH uses."/>
    </property>            
    <property name="prerelease">  
      <property-ui type="checkBox" hidden="true" label="Prerelease" description="Indicates that pre-release gems should be installed."/>
    </property>      
    <property name="runList">  
      <property-ui type="textBox" label="Run List" description="A comma-separated list of roles and/or recipes to be added to this node's run-list once it is has been bootstrapped."/>
    </property>      
    <property name="secret">  
      <property-ui type="textAreaBox" hidden="true" label="Secret" description="The encryption key that is used for values contained within a data bag item."/>
    </property>      
    <property name="secretFile">  
      <property-ui type="textBox" hidden="true" label="Secret File" description="The path to the file that contains the encryption key."/>
    </property>      
    <property name="template">
      <property-ui type="textBox" hidden="true" label="Template" description="The path to a template file that will be used during a bootstrap operation. Do not use the --distro option when --template-file is specified."/>
    </property>      
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="bootstrap.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command>
  
</step-type>

  <step-type name="Run-List Add">
    <description> Add to the run-list of a Node by adding recipes or roles in a specific order.</description>
    <properties>
      <property name="name" required="true">  
        <property-ui type="textBox" label="Node Name" description="Name of the node you wish to update."/>
      </property>      
      <property name="runList" required="true">  
        <property-ui type="textBox" label="Run-List Item" description="A comma seperate list of roles and recipes you want to add. roles are entered as 'role[ROLE_NAME]'. The full recipe format is 'recipe[COOKBOOK::RECIPE_NAME]'. Recipes can also be added with a cookbook by 'COOKBOOK::RECIPE_NAME'. Lastly, the default recipe can be added by 'COOKBOOK'"/>
      </property>      
      <property name="after">  
        <property-ui type="textBox" label="After Item" description="Add the run-list item after the specified item."/>
      </property>      
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="addRunList.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command> 
  </step-type>

<step-type name="Delete Clients Bulk">
  <description> This will delete clients from the Chef server in bulk.</description>
  <properties>
    <property name="regex" required="true">  
      <property-ui type="textBox" label="Regular Expression" description="Regular expression to delete multiple cookbooks."/>
    </property>      
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="bulkDeleteClient.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command>
</step-type>

<step-type name="Delete Cookbooks Bulk">
  <description> This will delete cookbooks from the Chef server in bulk.</description>
  <properties>
    <property name="regex" required="true">  
      <property-ui type="textBox" label="Regular Expression" description="Regular expression to delete multiple cookbooks."/>
    </property>      
    <property name="purge">  
      <property-ui type="checkBox" label="Purge" description="Completely remove cookbooks from the server. This will cause any other cookbooks that reference the deleted cookbooks to be disabled."/>
    </property>     
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="bulkDeleteCookbook.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command>
</step-type>

<step-type name="Delete Nodes Bulk">
  <description>This will delete nodes from the Chef server in bulk.</description>
  <properties>
    <property name="regex" required="true">  
      <property-ui type="textBox" label="Regular Expression" description="Regular expression to delete multiple nodes."/>
    </property>      
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="bulkDeleteNode.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command>
</step-type>

<step-type name="Create Recipe">
    <description> Create a recipe.</description>
    <properties>
      <property name="name" required="true">  
        <property-ui type="textBox" label="Recipe Full File Path" description="Path and name of the recipe you wish to create. Make sure to include the extension of the file."/>
      </property>        
      <property name="contents" required="true">  
        <property-ui type="textAreaBox" label="Recipe Contents" description="The code that will go into the recipe."/>
      </property>      
      <property name="overwrite">  
        <property-ui type="checkBox" default-value="true" label="Overwrite" description="Overwrite the recipe if it exists."/>
      </property>      
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="createRecipe.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>



  <step-type name="Delete Client">
    <description>
    This will delete a client from the Chef server.
    </description>
    <properties>
      <!-- Required Field -->
      <property name="Client" required="true">  
        <property-ui type="textBox" label="Client Name" description="The name of the client to be deleted."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]>
    </post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deleteClient.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>


<step-type name="Delete Cookbook">
  <description> This will delete a cookbook from the Chef server.</description>
  <properties>
    <property name="name" required="true">  
      <property-ui type="textBox" label="Cookbook Name" description="This is the name of the cookbook to be deleted."/>
    </property>      
    <property name="version">  
      <property-ui type="textBox" label="Version" description="This is the version of the cookbook you want to delete."/>
    </property>     
    <property name="all">  
      <property-ui type="checkBox" label="Delete All" description="Delete every version of the cookbook."/>
    </property> 
    <property name="purge">  
      <property-ui type="checkBox" label="Purge" description="Completely remove the cookbook from the server. This will disable any other cookbooks that reference any files in the cookbook that is being deleted."/>
    </property> 
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="deleteCookbook.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command>
</step-type>

<step-type name="Delete Node">
  <description> Deletes a node from the Chef server.</description>
  <properties>
    <property name="nodeName" required="true">  
      <property-ui type="textBox" label="Node Name" description="Name of the node to be deleted."/>
    </property>           
  </properties>
  <post-processing><![CDATA[
      if (properties.get("exitCode") != 0) {
          properties.put("Status", "Failure");
      }
      else {
          properties.put("Status", "Success");
      }
   ]]></post-processing>

  <command program="${GROOVY_HOME}/bin/groovy">
    <arg file="deleteNode.groovy"/>
    <arg file="${PLUGIN_INPUT_PROPS}"/>
    <arg file="${PLUGIN_OUTPUT_PROPS}"/>
  </command> 
</step-type>

  <step-type name="Delete Recipe">
    <description>
    This will delete a recipe at a given file location.
    </description>
    <properties>
      <!-- Required Field -->
      <property name="filePath" required="true">  
        <property-ui type="textBox" label="Recipe File Path" description="The file path of the recipe to be deleted."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]>
    </post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deleteRecipe.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

  <step-type name="Delete User">
    <description>
    This will delete the user specified.
    </description>
    <properties>
      <!-- Required Field -->
      <property name="user" required="true">  
        <property-ui type="textBox" label="User Name" description="The name of the user to be deleted"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]>
    </post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deleteUser.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

  <step-type name="Install Cookbook From Site">
    <description>
    	This step allows the user to install a Chef cookbooks from the 
    	cookbooks community hosted at http://community.opscode.com/. 
    </description>
    <properties>
      <!-- Required Field -->
      <property name="cookbookName" required="true">  
        <property-ui type="textBox" label="Cookbook Name" description="The name of the cookbook to be installed"/>
      </property>
      <!-- Optional Fields -->
      <property name="cookbookVersion" required="false">
        <property-ui type="textBox" label="Cookbook Version" description="The version of the cookbook to be installed"/>
      </property>     
      <property name="useCurrentBranch" required="false">
        <property-ui type="checkBox" label="Use Current Branch" description="Indicates that the current branch will be used."/>
      </property>
      <property name="defaultBranchName" required="false">
        <property-ui type="textBox" label="Default Branch Name" description="The name of the default branch. This will default to the master branch"/>
      </property>
      <property name="skipDependencies" required="false">
        <property-ui type="checkBox" label="Skip Dependencies" description="Indicates that all cookbooks to which the installed cookbook has a dependency will not be installed"/>
      </property>
      <property name="path" required="false">
        <property-ui type="textBox" label="Cookbook Installation Path" description="The directory in which the cookbook will be created. This can be colon separated path."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="installCookbookFromSite.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>  
  </step-type>

  <step-type name="Run-List Remove">
    <description> Remove an item from the run-list of a Node.</description>
    <properties>
      <property name="name" required="true">  
        <property-ui type="textBox" label="Node Name" description="Name of the node you wish to update."/>
      </property>      
      <property name="runList" required="true">  
        <property-ui type="textBox" label="Run-List Item" description="A comma seperate list of roles and recipes you want to remove. roles are entered as 'role[ROLE_NAME]'. The full recipe format is 'recipe[COOKBOOK::RECIPE_NAME]'. Recipes can also be added with a cookbook by 'COOKBOOK::RECIPE_NAME'. Lastly, the default recipe can be added by 'COOKBOOK'"/>
      </property>      
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="removeRunList.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>  
  </step-type>

  <step-type name="Create or Edit Role">
    <description>Creates a role or edits an existing role on the Chef server.</description>
    <properties>
      <property name="select" required="true">  
        <property-ui type="selectBox" default-value="file" label="JSON Data Source" description="Use to choose between using the text box below to type out your own JSON data, or to load it from a file."/>
	<value label = "Create New File">textbox</value>
	<value label = "Use Existing File">file</value>
      </property>      
      <property name="roleContents" required="false">  
        <property-ui type="textAreaBox" label="JSON Data For New File" description="The JSON data that will describe the new/edited role."/>
      </property> 
      <property name="filePath" required="false">  
        <property-ui type="textBox" label="Existing File Path" description="The path to the JSON file which will describe the new role that is created."/>
      </property>      
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="createRole.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>  
  </step-type>

  <step-type name="Generic Knife Command">
    <description>This step will allow you to execute any knife command.</description>
    <properties>
      <property name="Command" required="true">
        <property-ui type="textAreaBox" label="Enter Command" description="Enter Knife command you wish to run, without 'knife' at the beginning. To get the command 'knife client list', enter 'client list'"/>
      </property>       
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="genericKnifeCommand.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
    
  </step-type>
   <step-type name="Deploy Chef">
    <description>Deploy chef to a node.</description>
    <properties>
      <property name="query" required="true">
        <property-ui type="textBox" label="Enter Query" description="The query to get nodes you want to deploy to."/>
      </property>
      <property name="sshLogin" required="true">
        <property-ui type="textBox" label="Enter SSH Login" description="Enter the SSH login for the nodes."/>
      </property>
      <property name="sshPasswd" required="true">
        <property-ui type="secureBox" label="Enter SSH Password" description="Enter the SSH password for the login."/>
      </property>
      <property name="sudoPasswd">
        <property-ui type="secureBox" label="Enter Sudo Password" description="Enter the password to allow for sudo on the nodes. If no password is given, the SSH password will be used instead"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deployChef.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

<step-type name="Create Cookbook">
    <description>Create a new Cookbook on the Chef server</description>
    <properties>
      <property name="createCookbookName" required="true">
        <property-ui type="textBox" label="Cookbook Name" description="This is the name of the Cookbook you want to create."/>
      </property> 
      <property name="createCookbookCopyrightHolder" required="false">
        <property-ui type="textBox" label="Copyright Holder" description="This is the name of the copyright holder for this cookbook."/>
      </property>
      <property name="createCookbookLicense" required="false">
        <property-ui type="selectBox" default-value="none" label="Type of license" description="This is the type of license under which the cookbook is distributed."/>
	<value label = "Apache v2.0">apachev2</value>
	<value label = "GPL v2">gplv2</value>
	<value label = "GPL v3">gplv3</value>
	<value label = "MIT">mit</value>
	<value label = "None - All Rights Reserved">none</value>
      </property> 
      <property name="createCookbookEmail" required="false">
        <property-ui type="textBox" label="Email of owner" description="This is the email of the individual who maintains this cookbook."/>
      </property>
      <property name="createCookbookPath" required="false">
        <property-ui type="textBox" label="Cookbook Path" description="This is the directory where the cookbook will be created."/>
      </property> 
      <property name="createCookbookFormat" required="false">
        <property-ui type="selectBox" default-value ="md" label="Documentation Format" description="This is the document format of the readme file."/>
	<value label=".md">md</value>
	<value label = ".rdoc">rdoc</value>
      </property>         
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="createCookbook.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

<step-type name="Upload">
    <description>Upload a cookbook, role, environment, or data bag to the Chef server.</description>
    <properties>
      <property name="uploadCookbookPattern" required="true">
        <property-ui type="textBox" default-value="/" label="Pattern" description="Pattern to upload."/>
      </property> 
      <property name="workingDir" required="true">
        <property-ui type="textBox" label="Directory" description="Directory to run the command from. Most commonly the Chef repo."/>
      </property> 
      <property name="uploadConcurrency" required="false">
        <property-ui type="textBox" label="Number of concurrent connections allowed" description="This is the maximum number of concurrent connections allowed. If left blank, the default is 10."/>
      </property> 
      <property name="uploadDiff" required="false">
        <property-ui type="checkBox" default-value="true" label="Upload only new or modified files" description="If checked, only upload new or modified files to the server."/>
      </property>
      <property name="uploadForce" required="false">
        <property-ui type="checkBox" label="Force upload of unmodified files" description="Check this to force of the upload of files even if they have not been modified."/>
      </property> 
      <property name="uploadFreeze" required="false">
        <property-ui type="checkBox" label="Do not allow modifications" description="Indicates a cookbook cannot be modified. Any changes to this cookbook must be uploaded later as a new version."/>
      </property> 
      <property name="uploadDryRun" required="false">
        <property-ui type="checkBox" label="Do a dry run" description="Indicates that no action is taken and only results are printed out."/>
      </property>
      <property name="uploadPurge" required="false">
        <property-ui type="checkBox" label="Purge files on server that are not in the Chef repo" description="Deletes roles, cookbooks, etc. on the server that are NOT contained in the Chef repo."/>
      </property>
      <property name="uploadRecurse" required="false">
        <property-ui type="checkBox" label="Disable recursive uploading of the directory" description="Disables the recursive uploading of the directory."/>
      </property>  
      <property name="uploadRepoMode" required="false">
        <property-ui type="selectBox" default-value="everything" label="Local Chef-repo Layout" description="This is the layout of the local chef repo. Possible values are: static, everything, or hosted_everything."/>
	<value label = "Everything">everything</value>
	<value label = "Hosted Everything">hosted_everything</value>
	<value label = "Static">static</value>
      </property>           
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="upload.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

<step-type name="Delete Role">
    <description>Delete a single role from the Chef server.</description>
    <properties>
      <property name="deleteRoleName" required="true">
        <property-ui type="textBox" label="Role Name" description="This is the name of the role which will be deleted."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deleteRole.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
  
   <step-type name="Delete Roles Bulk">
    <description>Delete a set of roles from the Chef server.</description>
    <properties>
      <property name="deleteRoleREGEX" required="true">
        <property-ui type="textBox" label="Regular Expression" description="This is the regular expression which will define which role(s) to delete."/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

    <command program="${GROOVY_HOME}/bin/groovy">
      <arg file="deleteRoleBulk.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>
</plugin>
